Task 5

1)

ListStack hat eine fast gleichbleibende Laufzeit für alle Stackgrößen. Im Vergleich dazu wächst die Laufzeit von ChunkedStack stetig.

JUnit version 4.12
.Size	ListStack	ChunkedStack
10000	2	2
20000	1	3
30000	2	4
40000	0	8
50000	1	12
60000	1	17
70000	1	22
80000	1	28
90000	1	39
100000	2	49
110000	1	58
120000	2	67
130000	2	79
140000	1	100
150000	1	133
160000	2	124
170000	2	137
180000	2	155
190000	2	173
200000	2	208
210000	1	230
220000	1	246
230000	1	255
240000	1	277
250000	2	341
260000	1	340
270000	2	355
280000	2	382
290000	17	442
300000	2	494
Total ListStack: 59ms.
Total ChunkedStack: 4780ms.
.
Time: 4,845

OK (2 tests)



2)

size ist rekursiv implementiert und durchläuft somit bei jedem Aufruf die gesamte Liste, dadurch wächst der Aufwand der size Funktion mit wachsender Stackgröße.

3)

Jetzt wird die Position jedes Chunks in der Liste in einer Variablen gespeichert. Die Position des letzten Chunks ist dann die Größe der Liste.

JUnit version 4.12
.Size	ListStack	ChunkedStack
10000	2	1
20000	2	1
30000	2	2
40000	1	0
50000	0	2
60000	2	1
70000	1	1
80000	3	2
90000	3	2
100000	3	2
110000	3	2
120000	3	2
130000	4	2
140000	3	1
150000	2	1
160000	2	1
170000	2	1
180000	2	2
190000	2	2
200000	2	4
210000	2	1
220000	2	1
230000	1	2
240000	1	2
250000	2	1
260000	2	1
270000	2	2
280000	2	2
290000	17	2
300000	2	1
Total ListStack: 77ms.
Total ChunkedStack: 47ms.
.
Time: 0,131

OK (2 tests)

